/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.82
 * Generated at: 2022-11-05 05:45:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSP;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.text.*;

public final class P59_005f3_005f18_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");  // 设置读取的字符编码,
	                                        //要和所输入的字符编码一致不然可能乱码
	String user = request.getParameter("user");     // 姓名
	String gender = request.getParameter("gender"); // 性别
	String age = request.getParameter("age");       // 年龄
	String email = request.getParameter("email");   // 邮箱
	String school = request.getParameter("school"); // 学院
	
	// getParameterValues() 读取一个变量的多个值内容,返回类型String数组
	String[] hobbys = request.getParameterValues("hobby"); 
	String hobby ="";                               // 爱好
	for(int i = 0;i < hobbys.length; i++) {
		hobby = hobby + hobbys[i]+" ";
	}
	
	String state = request.getParameter("state");   // 说明
	

      out.write("\r\n");
      out.write("<!DOCTYPE HTML>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <title>学生个人信息调查表</title>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("  	<table align=\"center\">\r\n");
      out.write("  		<tr>\r\n");
      out.write("  			<td>姓名:</td>\r\n");
      out.write("  			<td>");
      out.print(user);
      out.write("</td>\r\n");
      out.write("  		</tr>\r\n");
      out.write("  		<tr>\r\n");
      out.write("  			<td>性别:</td>\r\n");
      out.write("  			<td>");
      out.print(gender);
      out.write("</td>\r\n");
      out.write("  		</tr>\r\n");
      out.write("  		<tr>\r\n");
      out.write("  			<td>年龄:</td>\r\n");
      out.write("  			<td>");
      out.print(age);
      out.write("</td>\r\n");
      out.write("  		</tr>\r\n");
      out.write("  		<tr>\r\n");
      out.write("  			<td>Email:</td>\r\n");
      out.write("  			<td>");
      out.print(email);
      out.write("</td>\r\n");
      out.write("  		</tr>\r\n");
      out.write("  		<tr>\r\n");
      out.write("  			<td>所在学院:</td>\r\n");
      out.write("  			<td>");
      out.print(school);
      out.write("</td>\r\n");
      out.write("  		</tr>\r\n");
      out.write("  		<tr>\r\n");
      out.write("  			<td>爱好:</td>\r\n");
      out.write("  			<td>");
      out.print(hobby);
      out.write("</td>\r\n");
      out.write("  		</tr>\r\n");
      out.write("  		<tr>\r\n");
      out.write("  			<td>说明:</td>\r\n");
      out.write("  			<td>");
      out.print(state);
      out.write("</td>\r\n");
      out.write("  		</tr>\r\n");
      out.write("  	</table>\r\n");
      out.write("  \r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
